
Q>>>>>>>>0:00:00.000000
You're working on a sophisticated task, creating a semantic-aware program mutator. We need to devise a new mutator for this purpose. 

Below is a list of mutators I've already implemented. To avoid redundancy, please ensure your proposed mutator is distinct from these:
```

AddRandomGotoStmt: Insert a new GotoStmt at a random position within a CompoundStmt excluding the last statement

AlterRandomPointerToRandomArray: Change a pointer declaration to an array declaration and modify dereference to array indexing.

ChangeBinop: Change binary expression's operator.

ChangeDeclRef: Change a DeclRefExpr's referenced variable.

ChangeRandomPointerInitialization: Randomly selects a PointerType variable initialization and changes its initialized value to another compatible pointer variable or null.

CollapseNestedIfs: Collapse nested if-else statements into a single if statement with a compound logical condition.

CompoundStmtGrouping: Group consecutive statements within a CompoundStmt.

ConvertForToWhileLoop: Convert a 'for' loop into an equivalent 'while' loop.

ConvertGlobalToLocal: Converts a global variable to local variables in all functions where it is used

ConvertIfToSwitch: Converts simple if-else-if ladders into a switch-case construct

DecayRandomArrayToPointer: Decay a randomly selected array variable to a pointer variable.

DecayRandomFunctionToPointer: Decays random functions to pointers and adjusts call sites accordingly.

DecayRandomPointerToArray: Change a pointer declaration to an array declaration.

DecayRandomStructToUnion: Randomly select a struct declaration and convert it into a union

DuplicateBranch: Duplicates one branch of an if statement

DuplicateRandomUnaryOperator: Duplicate randomly selected UnaryOperator.

EmbedCompoundStmt: Embed a CompoundStmt inside another CompoundStmt

FlipLogicalOperator: Flip the logical operator in a LogicalExpr.

IncreasePointerLevel: Increase the pointer level of a variable.

InlineFunctionCall: Inline a function call with its body.

InlineRandomVarDecl: Inline a random VarDecl's initializer and remove the declaration.

InsertRandomArrayIndexMutation: Mutate an array index randomly.

InsertRandomBreakStmt: Randomly inserts a break statement in a loop body.

InsertRandomFunctionCall: Insert a random function call in a CompoundStmt.

InsertRandomReturnStmt: Insert a return statement at a random position in a function

InsertRandomTypeConversion: Insert a random type conversion to a compatible type.

InsertRandomUnaryOperator: Insert a unary operator before a literal.

InterchangeFuncCalls: Interchange positions of two function calls within a CompoundStmt

InverseLogicalExpr: Inverse logical expressions.

InverseUnaryOperator: Inverses a Unary Operator

InvertFunctionCondition: Inverts the condition of a boolean function.

InvertRelationalOperator: Invert the relational operator in a BinaryOperator

LiftNestedFunction: Lifts a function call to the outer level and replaces the original location with a new variable.

ModifyArrayDim: Modifies a random ArrayType variable's dimension.

ModifyRandomEnum: Randomly select an EnumDecl and change the value of one of its EnumConstantDecls to a different integer value.

ModifyRandomFieldOfStruct: Randomly selects a FieldDecl within a RecordDecl (Struct or Union), and changes its type to another compatible type from the existing types in the program.

ModifyRandomFieldOfStructMutator: This mutator modifies a random field of a struct.

MutateFunctionReturnType: Change return type of a non-void function to double and modify return statements.

MutateLoopBounds: Modify the loop control variable's initialization, condition, or increment/decrement statement.

MutatePointerTypeToDifferentType: Change pointer's pointed-to type.

NegateLiteral: Negate a selected Integer or Floating point Literal.

RandomizeCaseStmts: Randomly shuffles the order of CaseStmts in a SwitchStmt

RandomizeFunctionOrder: Randomly swap two function definitions in a program.

RandomizeIfElseBranches: Randomly selects an IfStmt, inverts the condition, and swaps the then and else branches.

RandomizeTernaryDefaults: Randomize the default values used in ternary expressions.

RandomizeTernaryNullDefaults: Randomize the default values used in ternary expressions when null pointers are detected.

RearrangeFunctionParams: Rearranges the parameters of function declarations randomly.

RemoveRandomParameter: Randomly remove a non-essential parameter from a function declaration and adjust all call sites accordingly.

ReplaceArrayWithPointer: Change an ArrayDecl to PointerDecl and modify all relevant array access expressions to pointer dereference.

ReplaceBinaryOperatorWithEquivalent: Replace binary operator with an equivalent operation.

ReplaceFunctionCallWithConstant: Replace a function call with a constant value.

ReplaceLiteralWithConstant: Replace a literal with a global constant.

ReplaceRandomCompoundAssignWithSeparate: Randomly selects a CompoundAssignOperator (like +=, -=, *=, /=), breaks it down into a separate binary operation and an assignment, and replaces the original CompoundAssignOperator with the two new separate statements.

ReplaceRandomExprWithNullptr: Replace a random pointer expression with NULL.

ReplaceRandomIntWithCharLiteral: Randomly replace an integer literal with a character literal from the ASCII range 0-127.

ReplaceRandomTypeWithTypedef: Randomly selects a Type and replaces it with a typedef of the same underlying type.

ReplaceReturnWithGlobal: Replace a function's return expression with a global variable.

ReplaceWhileWithDoWhile: Replace a WhileStmt with a DoWhileStmt, retaining the condition and body.

ReplaceWithEquivalentUnaryExpr: Replace UnaryExpr with an equivalent UnaryExpr that uses a different operator.

ScrambleFunctionArgs: Randomly shuffle function arguments while maintaining type compatibility.

ShiftFunctionParams: Shift the position of all parameters one place to the right.

SplitCompoundStmt: Randomly split a CompoundStmt into two nested CompoundStmts.

SwapFuncDeclParams: Swap two parameters in a function declaration and its call sites

SwapNestedFunctionCalls: Swap the positions of two nested function calls.

SwapNestedIfElse: Swap a nested if-else statement and inverse the condition.

SwapNestedLoops: Swap the bodies of inner and outer loop.

SwapRandomBinaryOperands: Swap operands of a random BinaryOperator's expression.

SwapRandomUnaryOperands: Swap operands of a random UnaryOperator's BinaryOperator sub-expression.

SwitchInitExpr: Switch initialization expressions of two VarDecls.

SwitchNestedCompoundStmt: Switch bodies of two nested CompoundStmts

ToggleLoopType: Toggle between `for` and `while` loop types.

ToggleReturnExpr: Toggle return expression to default value.

ToggleStaticVarDecl: Toggle static and non-static for VarDecl

ToggleVarDeclInitialization: Toggle variable declaration initialization.

TransformConditionalOperatorToIf: Transform a ConditionalOperator into an IfStmt

TransformConditionalOperatorToIfStmt: Transform a ConditionalOperator into an IfStmt

WrapStmtInIf: Wrap a random non-control-flow statement with an if-statement with a random boolean condition.

```

To aid in the development of a new mutator, consider manipulating the following elements through actions such as Addition, Modification, Combination, Copying, Decay, Inlining, Un-inlining, Duplication, Destruction, Grouping, Increase, Inversion, Lift, Mutation, Removal, Swap, Switch, or Toggle:
Initialization, InitExpr, UnaryOperator, CharLiteral, IntegerLiteral, Type, Decl->getType, ReturnExpr, VarDecl, Scope, StmtExpr, FieldDecl, BinaryOperator, Stmt, CompoundStmt, IfStmt, GotoStmt, WhileStmt, WhileStmt->getCond, StringLiteral, PointerType, Parameter, ArrayDimension, PointerLevel, LogicalExpr, Branches, CaseStmt, LabelStmt, FunctionDecl, FunctionDecl.type, TypeConversion, ExprStmt.

**Important Guidelines**:
- Your response should detail only a single mutator.
- The mutator should involve only one mutation operator (or verb) and one mutation target.
- The response should adhere strictly to the following format, with no additional information:
```
ShuffleStmts: This mutator randomly selects a subset of consecutive statements from a CompoundStmt, shuffles them, and replaces the original ith stmt with the ith shuffled stmt.
```
A<<<<<<<<0:00:15.523202
```
ReplaceLiteralWithRandomValue: This mutator randomly selects an Integer, Character or Floating point literal from a program and replaces it with a new randomly generated value of the same data type.
```
Q>>>>>>>>0:00:15.526929
Assist me in identifying test cases that can effectively apply the mutator named ReplaceLiteralWithRandomValue.

**Important Guidelines**
- Each test case should be presented in a separate code block.
- Each test case should be a complete, compilable, runnable program.
- Please use only C features
A<<<<<<<<0:00:56.267920
Sure, here are some test cases that would effectively apply the `ReplaceLiteralWithRandomValue` mutator.

**Test Case 1: Simple Function with Integer Literal**
```C
#include<stdio.h>

int main() {
    int a = 5;
    int b = a * 10;
    printf("Result: %d\n", b);

    return 0;
}
```
In this case, the mutator can replace the integer literals 5 and 10 with other random integer values.

**Test Case 2: Floating Point Literals**
```C
#include<stdio.h>

int main() {
    float a = 1.23;
    float b = 4.56;
    float c = a + b;

    printf("Sum: %f\n", c);

    return 0;
}
```
In this case, the mutator can replace the floating point literals `1.23` and `4.56` with other random floating point values.

**Test Case 3: Character Literals**
```C
#include<stdio.h>

int main() {
    char a = 'x';
    char b = 'y';

    printf("Characters: %c %c\n", a, b);

    return 0;
}
```
In this case, the mutator can replace the character literals `'x'` and `'y'` with other random character values.

**Test Case 4: Multiple Types of Literals**
```C
#include<stdio.h>

int main() {
    int a = 5;
    float b = 3.14;
    char c = 'z';

    printf("Values: %d %f %c\n", a, b, c);

    return 0;
}
```
In this case, the mutator can replace the integer literal `5`, the floating point literal `3.14`, and the character literal `'z'` with other random values of the corresponding types.

**Test Case 5: Literals in Conditional Statements**
```C
#include<stdio.h>

int main() {
    int a = 50;
    if (a > 10) {
        printf("The number is greater than 10.\n");
    } else {
        printf("The number is not greater than 10.\n");
    }

    return 0;
}
```
In this case, the mutator can replace the integer literals `50` and `10` with other random integer values. This could potentially change the outcome of the conditional statement.
Q>>>>>>>>0:00:56.616704
Assist me in implementing the mutator named ReplaceLiteralWithRandomValue. Below is the description of its functionality:
This mutator randomly selects an Integer, Character or Floating point literal from a program and replaces it with a new randomly generated value of the same data type.
```

You can utilize below's two example implementation as a reference:

Example implementation for mutator ChangeDeclRef.
```cpp
// ChangeDeclRef.cpp
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ChangeDeclRef : public Mutator,
                      public clang::RecursiveASTVisitor<ChangeDeclRef> {

  using VisitorTy = clang::RecursiveASTVisitor<ChangeDeclRef>;

public:
  using Mutator::Mutator;
  bool mutate() override {
    TheVars.push_back({});
    TraverseAST(getASTContext());
    if (TheRefs.empty() || TheVars.empty()) return false;

    DeclRefExpr *ref = randElement(TheRefs);
    if (!isa<VarDecl>(ref->getDecl()))
      return false; // Ensure the Decl is actually a VarDecl

    VarDecl *oldVar = cast<VarDecl>(ref->getDecl());
    if (ExprVarsMap[ref].size() == 0) return false;

    VarDecl *newVar = randElement(ExprVarsMap[ref]);
    if (oldVar == newVar) return false;

    // Replace the old variable with the new one
    getRewriter().ReplaceText(ref->getSourceRange(), newVar->getNameAsString());

    return true;
  }

  bool VisitDeclRefExpr(clang::DeclRefExpr *DRE) {
    if (isMutationSite(DRE)) {
      TheRefs.push_back(DRE);
      ExprVarsMap[DRE] = TheVars.back();
    }
    return true;
  }

  bool VisitVarDecl(clang::VarDecl *VD) {
    if (!TheVars.empty()) { TheVars.back().push_back(VD); }
    return true;
  }

  bool TraverseCompoundStmt(clang::CompoundStmt *CS) {
    if (!TheVars.empty()) {
      // Push a copy of the current set of variables
      TheVars.push_back(TheVars.back());
    } else {
      // Create the first set of variables
      TheVars.push_back({});
    }

    VisitorTy::TraverseCompoundStmt(CS);
    TheVars.pop_back();
    return true;
  }

  bool TraverseFunctionDecl(clang::FunctionDecl *FD) {
    TheVars.push_back(TheVars.back());
    VisitorTy::TraverseFunctionDecl(FD);
    TheVars.pop_back();
    return true;
  }

private:
  std::map<clang::DeclRefExpr *, std::vector<clang::VarDecl *>> ExprVarsMap;
  std::vector<clang::DeclRefExpr *> TheRefs;
  std::vector<std::vector<clang::VarDecl *>> TheVars;
};

static RegisterMutator<ChangeDeclRef> M(
    "ChangeDeclRef", "Change a DeclRefExpr's referenced variable.");
```

Example implementation for mutator ChangeBinop.
```cpp
// ChangeBinop.cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ChangeBinop
    : public Mutator,
      public clang::RecursiveASTVisitor<ChangeBinop> {
public:
  using Mutator::Mutator;
  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheOperators.empty()) return false;

    BinaryOperator *expr = randElement(TheOperators);

    // perform rewrite
    auto newOps = computeValidAlternatives(expr);
    BinaryOperatorKind newOpKind = newOps[randIndex(newOps.size())];
    SourceLocation OpLoc = expr->getOperatorLoc();
    std::string NewOp = BinaryOperator::getOpcodeStr(newOpKind).str();
    getRewriter().ReplaceText(
        OpLoc, expr->getOpcodeStr(expr->getOpcode()).size(), NewOp);

    return true;
  }

  bool VisitBinaryOperator(clang::BinaryOperator *BO) {
    TheOperators.push_back(BO);
    return true;
  }

private:
  std::vector<clang::BinaryOperator *> TheOperators;

  std::vector<clang::BinaryOperatorKind> computeValidAlternatives(
      clang::BinaryOperator *op) {
    std::vector<BinaryOperatorKind> validAlternatives;

    Expr *lhs = op->getLHS();
    Expr *rhs = op->getRHS();
    SourceLocation loc = op->getExprLoc();

    auto &sema = getCompilerInstance().getSema();
    for (int i = BO_PtrMemD; i <= BO_Comma; ++i) {
      if (i == BO_PtrMemD || i == BO_PtrMemI || i == BO_Cmp ||
          i == op->getOpcode())
        continue;
      BinaryOperatorKind kind = static_cast<BinaryOperatorKind>(i);
      ExprResult result = sema.CreateBuiltinBinOp(loc, kind, lhs, rhs);

      if (!result.isInvalid()) validAlternatives.push_back(kind);
    }

    return validAlternatives;
  }
};

static RegisterMutator<ChangeBinop> M(
    "ChangeBinop", "Change binary expression's operator.");
```

Consider using the following APIs for easier implementation:
```
* getASTContext()
* getCompilerInstance()
* getCompilerInstance().getSema()
* getMostRecentTranslationUnitDecl(clang::FunctionDecl *)
* std::string formatAsDecl(clang::QualType ty, const std::string &placeholder)
* clang::SourceRange getExpansionRange(clang::SourceRange range)
* clang::SourceLocation getLocForEndOfToken(clang::SourceLocation loc)
* clang::SourceLocation findStringLocationFrom(clang::SourceLocation beginLoc, llvm::StringRef target)
* clang::SourceRange findBracesRange(clang::SourceLocation beginLoc, char beginBrace = '(', char endBrace = ')')
* getSourceText(const NodeType *node).str()
* getManager().getRandomGenerator()
* unsigned randIndex(unsigned n)
* bool randBool();
* template <typename Container> auto &randElement(Container &container) 
* std::string generateUniqueName(const std::string &baseName), note that this only generate a identifier for you, you should insert declaration to corresponding CompStmt by yourself
```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:01:52.509394
Sure, I can help with that. Here is an implementation of the `ReplaceLiteralWithRandomValue` mutator in C++ using Clang:

```cpp
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>
#include <cstdlib>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ReplaceLiteralWithRandomValue : public Mutator,
                                      public clang::RecursiveASTVisitor<ReplaceLiteralWithRandomValue> {
public:
  using Mutator::Mutator;

  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    auto literal = randElement(TheLiterals);

    if (auto intLiteral = dyn_cast<IntegerLiteral>(literal)) {
      int value = std::rand();
      getRewriter().ReplaceText(intLiteral->getSourceRange(), std::to_string(value));
      return true;
    } 
    else if (auto floatLiteral = dyn_cast<FloatingLiteral>(literal)) {
      float value = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
      getRewriter().ReplaceText(floatLiteral->getSourceRange(), std::to_string(value));
      return true;
    } 
    else if (auto charLiteral = dyn_cast<CharacterLiteral>(literal)) {
      char value = 'a' + std::rand() % 26;
      getRewriter().ReplaceText(charLiteral->getSourceRange(), std::string(1, value));
      return true;
    }

    return false;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

  bool VisitCharacterLiteral(clang::CharacterLiteral *CL) {
    TheLiterals.push_back(CL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;
};

static RegisterMutator<ReplaceLiteralWithRandomValue> M(
    "ReplaceLiteralWithRandomValue", "Replace a literal with a random value of the same type.");
```

This mutator collects all integer, floating point, and character literals in the program. Then, when `mutate` is called, it chooses a random literal and replaces it with a new randomly generated value of the same type. The new value is generated using the standard `std::rand` function.

Please note that this is a simplistic implementation and might not work correctly in all cases. For example, it does not handle the case where the new value is not valid in the context of the literal (e.g., assigning a character outside the valid range to a `char`). Also, the random number generation is not seeded, so it will generate the same sequence of numbers in each run of the program.
Q>>>>>>>>0:02:47.589253
Based on the results of your ReplaceLiteralWithRandomValue implementation, we have encountered an issue:

The mutator is transforming a semantically valid program into an invalid one.

If this consistently happens, you may try other approaches.

To aid in troubleshooting, please find the relevant information below:

Compilation errors:
```
output/output.c:5:14: error: use of undeclared identifier 'x'
    char b = x;
             ^
1 error generated.

```

Input program:
```
#include<stdio.h>

int main() {
    char a = 'x';
    char b = 'y';

    printf("Characters: %c %c\n", a, b);

    return 0;
}
```

Output program:
```
#include<stdio.h>

int main() {
    char a = 'x';
    char b = x;

    printf("Characters: %c %c\n", a, b);

    return 0;
}
```

Difference between the input and output programs:
```
--- output/input.c
+++ output/output.c
@@ -2,7 +2,7 @@
 
 int main() {
     char a = 'x';
-    char b = 'y';
+    char b = x;
 
     printf("Characters: %c %c\n", a, b);
 

```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:03:40.188901
It appears the issue is that the mutator is replacing a character literal with a single character, but without enclosing quotes, which is causing the replacement to be interpreted as an identifier. 

Here's an updated version of the `ReplaceLiteralWithRandomValue` mutator that adds quotes when replacing character literals:

```cpp
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>
#include <cstdlib>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ReplaceLiteralWithRandomValue : public Mutator,
                                      public clang::RecursiveASTVisitor<ReplaceLiteralWithRandomValue> {
public:
  using Mutator::Mutator;

  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    auto literal = randElement(TheLiterals);

    if (auto intLiteral = dyn_cast<IntegerLiteral>(literal)) {
      int value = std::rand();
      getRewriter().ReplaceText(intLiteral->getSourceRange(), std::to_string(value));
      return true;
    } 
    else if (auto floatLiteral = dyn_cast<FloatingLiteral>(literal)) {
      float value = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
      getRewriter().ReplaceText(floatLiteral->getSourceRange(), std::to_string(value));
      return true;
    } 
    else if (auto charLiteral = dyn_cast<CharacterLiteral>(literal)) {
      char value = 'a' + std::rand() % 26;
      // Add quotes around the new character literal
      getRewriter().ReplaceText(charLiteral->getSourceRange(), "'" + std::string(1, value) + "'");
      return true;
    }

    return false;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

  bool VisitCharacterLiteral(clang::CharacterLiteral *CL) {
    TheLiterals.push_back(CL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;
};

static RegisterMutator<ReplaceLiteralWithRandomValue> M(
    "ReplaceLiteralWithRandomValue", "Replace a literal with a random value of the same type.");
```

This version of the mutator should correctly replace character literals with new character literals enclosed in quotes, avoiding the issue where the replacement is interpreted as an identifier.