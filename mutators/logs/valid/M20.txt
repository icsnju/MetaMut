
Q>>>>>>>>0:00:00.000000
You're working on a sophisticated task, creating a semantic-aware program mutator. We need to devise a new mutator for this purpose. 

Below is a list of mutators I've already implemented. To avoid redundancy, please ensure your proposed mutator is distinct from these:
```

AddRandomGotoStmt: Insert a new GotoStmt at a random position within a CompoundStmt excluding the last statement

ChangeBinop: Change binary expression's operator.

ChangeDeclRef: Change a DeclRefExpr's referenced variable.

DecayRandomArrayToPointer: Decay a randomly selected array variable to a pointer variable.

DuplicateBranch: Duplicates one branch of an if statement

EmbedCompoundStmt: Embed a CompoundStmt inside another CompoundStmt

IncreasePointerLevel: Increase the pointer level of a variable.

InlineFunctionCall: Inline a function call with its body.

InsertRandomTypeConversion: Insert a random type conversion to a compatible type.

InsertRandomUnaryOperator: Insert a unary operator before a literal.

InverseLogicalExpr: Inverse logical expressions.

InverseUnaryOperator: Inverses a Unary Operator

InvertFunctionCondition: Inverts the condition of a boolean function.

LiftNestedFunction: Lifts a function call to the outer level and replaces the original location with a new variable.

ModifyArrayDim: Modifies a random ArrayType variable's dimension.

NegateLiteral: Negate a selected Integer or Floating point Literal.

ReplaceBinaryOperatorWithEquivalent: Replace binary operator with an equivalent operation.

ReplaceReturnWithGlobal: Replace a function's return expression with a global variable.

ShiftFunctionParams: Shift the position of all parameters one place to the right.

SwapFuncDeclParams: Swap two parameters in a function declaration and its call sites

SwapNestedIfElse: Swap a nested if-else statement and inverse the condition.

SwitchInitExpr: Switch initialization expressions of two VarDecls.

ToggleLoopType: Toggle between `for` and `while` loop types.

ToggleReturnExpr: Toggle return expression to default value.

```

To aid in the development of a new mutator, consider manipulating the following elements through actions such as Addition, Modification, Combination, Copying, Decay, Inlining, Un-inlining, Duplication, Destruction, Grouping, Increase, Inversion, Lift, Mutation, Removal, Swap, Switch, or Toggle:
Initialization, InitExpr, UnaryOperator, CharLiteral, IntegerLiteral, Type, Decl->getType, ReturnExpr, VarDecl, Scope, StmtExpr, FieldDecl, BinaryOperator, Stmt, CompoundStmt, IfStmt, GotoStmt, WhileStmt, WhileStmt->getCond, StringLiteral, PointerType, Parameter, ArrayDimension, PointerLevel, LogicalExpr, Branches, CaseStmt, LabelStmt, FunctionDecl, FunctionDecl.type, TypeConversion, ExprStmt.

**Important Guidelines**:
- Your response should detail only a single mutator.
- The mutator should involve only one mutation operator (or verb) and one mutation target.
- The response should adhere strictly to the following format, with no additional information:
```
ShuffleStmts: This mutator randomly selects a subset of consecutive statements from a CompoundStmt, shuffles them, and replaces the original ith stmt with the ith shuffled stmt.
```
A<<<<<<<<0:00:15.654508
```
ReplaceLiteralWithConstant: This mutator randomly selects an IntegerLiteral or FloatingLiteral from an expression and replaces it with a new global constant, defining the constant at the global scope with the same value as the original literal.
```
Q>>>>>>>>0:00:15.655742
Assist me in identifying test cases that can effectively apply the mutator named ReplaceLiteralWithConstant.

**Important Guidelines**
- Each test case should be presented in a separate code block.
- Each test case should be a complete, compilable, runnable program.
- Don't use C++ features
A<<<<<<<<0:00:46.716151
Sure, here are some test cases that can help you in testing the `ReplaceLiteralWithConstant` mutator:

**Test Case 1** - Testing with Integer Literals

```c
#include<stdio.h>

int main() {
    int a = 5, b = 10;
    int sum = a + b;
    printf("Sum: %d\n", sum);
    return 0;
}
```

**Test Case 2** - Testing with Floating Literals

```c
#include<stdio.h>

int main() {
    float a = 5.5, b = 10.5;
    float sum = a + b;
    printf("Sum: %f\n", sum);
    return 0;
}
```

**Test Case 3** - Testing with a mix of Integer and Floating Literals

```c
#include<stdio.h>

int main() {
    int a = 5;
    float b = 10.5;
    float sum = a + b;
    printf("Sum: %f\n", sum);
    return 0;
}
```

**Test Case 4** - Testing with negative Integer and Floating Literals

```c
#include<stdio.h>

int main() {
    int a = -5;
    float b = -10.5;
    float sum = a + b;
    printf("Sum: %f\n", sum);
    return 0;
}
```

**Test Case 5** - Testing with multiple literals in a function call

```c
#include<stdio.h>

int add(int a, int b, int c, int d) {
    return a + b + c + d;
}

int main() {
    int sum = add(5, 10, 15, 20);
    printf("Sum: %d\n", sum);
    return 0;
}
```

These test cases should help you to effectively test the `ReplaceLiteralWithConstant` mutator.
Q>>>>>>>>0:00:46.720776
Assist me in implementing the mutator named ReplaceLiteralWithConstant. Below is the description of its functionality:
This mutator randomly selects an IntegerLiteral or FloatingLiteral from an expression and replaces it with a new global constant, defining the constant at the global scope with the same value as the original literal.
```

You can utilize below's two example implementation as a reference:

Example implementation for mutator ChangeDeclRef.
```cpp
// ChangeDeclRef.cpp
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ChangeDeclRef : public Mutator,
                      public clang::RecursiveASTVisitor<ChangeDeclRef> {

  using VisitorTy = clang::RecursiveASTVisitor<ChangeDeclRef>;

public:
  using Mutator::Mutator;
  bool mutate() override {
    TheVars.push_back({});
    TraverseAST(getASTContext());
    if (TheRefs.empty() || TheVars.empty()) return false;

    DeclRefExpr *ref = randElement(TheRefs);
    if (!isa<VarDecl>(ref->getDecl()))
      return false; // Ensure the Decl is actually a VarDecl

    VarDecl *oldVar = cast<VarDecl>(ref->getDecl());
    if (ExprVarsMap[ref].size() == 0) return false;

    VarDecl *newVar = randElement(ExprVarsMap[ref]);
    if (oldVar == newVar) return false;

    // Replace the old variable with the new one
    getRewriter().ReplaceText(ref->getSourceRange(), newVar->getNameAsString());

    return true;
  }

  bool VisitDeclRefExpr(clang::DeclRefExpr *DRE) {
    if (isMutationSite(DRE)) {
      TheRefs.push_back(DRE);
      ExprVarsMap[DRE] = TheVars.back();
    }
    return true;
  }

  bool VisitVarDecl(clang::VarDecl *VD) {
    if (!TheVars.empty()) { TheVars.back().push_back(VD); }
    return true;
  }

  bool TraverseCompoundStmt(clang::CompoundStmt *CS) {
    if (!TheVars.empty()) {
      // Push a copy of the current set of variables
      TheVars.push_back(TheVars.back());
    } else {
      // Create the first set of variables
      TheVars.push_back({});
    }

    VisitorTy::TraverseCompoundStmt(CS);
    TheVars.pop_back();
    return true;
  }

  bool TraverseFunctionDecl(clang::FunctionDecl *FD) {
    TheVars.push_back(TheVars.back());
    VisitorTy::TraverseFunctionDecl(FD);
    TheVars.pop_back();
    return true;
  }

private:
  std::map<clang::DeclRefExpr *, std::vector<clang::VarDecl *>> ExprVarsMap;
  std::vector<clang::DeclRefExpr *> TheRefs;
  std::vector<std::vector<clang::VarDecl *>> TheVars;
};

static RegisterMutator<ChangeDeclRef> M(
    "ChangeDeclRef", "Change a DeclRefExpr's referenced variable.");
```

Example implementation for mutator ChangeBinop.
```cpp
// ChangeBinop.cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ChangeBinop
    : public Mutator,
      public clang::RecursiveASTVisitor<ChangeBinop> {
public:
  using Mutator::Mutator;
  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheOperators.empty()) return false;

    BinaryOperator *expr = randElement(TheOperators);

    // perform rewrite
    auto newOps = computeValidAlternatives(expr);
    BinaryOperatorKind newOpKind = newOps[randIndex(newOps.size())];
    SourceLocation OpLoc = expr->getOperatorLoc();
    std::string NewOp = BinaryOperator::getOpcodeStr(newOpKind).str();
    getRewriter().ReplaceText(
        OpLoc, expr->getOpcodeStr(expr->getOpcode()).size(), NewOp);

    return true;
  }

  bool VisitBinaryOperator(clang::BinaryOperator *BO) {
    TheOperators.push_back(BO);
    return true;
  }

private:
  std::vector<clang::BinaryOperator *> TheOperators;

  std::vector<clang::BinaryOperatorKind> computeValidAlternatives(
      clang::BinaryOperator *op) {
    std::vector<BinaryOperatorKind> validAlternatives;

    Expr *lhs = op->getLHS();
    Expr *rhs = op->getRHS();
    SourceLocation loc = op->getExprLoc();

    auto &sema = getCompilerInstance().getSema();
    for (int i = BO_PtrMemD; i <= BO_Comma; ++i) {
      if (i == BO_PtrMemD || i == BO_PtrMemI || i == BO_Cmp ||
          i == op->getOpcode())
        continue;
      BinaryOperatorKind kind = static_cast<BinaryOperatorKind>(i);
      ExprResult result = sema.CreateBuiltinBinOp(loc, kind, lhs, rhs);

      if (!result.isInvalid()) validAlternatives.push_back(kind);
    }

    return validAlternatives;
  }
};

static RegisterMutator<ChangeBinop> M(
    "ChangeBinop", "Change binary expression's operator.");
```

Consider using the following APIs for easier implementation:
```
* getASTContext()
* getCompilerInstance()
* getCompilerInstance().getSema()
* getMostRecentTranslationUnitDecl(clang::FunctionDecl *)
* std::string formatAsDecl(clang::QualType ty, const std::string &placeholder)
* clang::SourceRange getExpansionRange(clang::SourceRange range)
* clang::SourceLocation getLocForEndOfToken(clang::SourceLocation loc)
* clang::SourceLocation findStringLocationFrom(clang::SourceLocation beginLoc, llvm::StringRef target)
* clang::SourceRange findBracesRange(clang::SourceLocation beginLoc, char beginBrace = '(', char endBrace = ')')
* template <class NodeType> llvm::StringRef getSourceText(const NodeType *node)
* getSourceText().str()
* getManager().getRandomGenerator()
* unsigned randIndex(unsigned n)
* bool randBool();
* template <typename Container> auto &randElement(Container &container) 
* std::string generateUniqueName(const std::string &baseName)

```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Important Notes**
- Your response should be a code box containing your mutator implementation.
- Do not leave any code unimplemented.
- Your implementation should follow the format of the provided example.

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:01:25.050686
Here is an implementation for the `ReplaceLiteralWithConstant` mutator:

```cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ReplaceLiteralWithConstant
    : public Mutator,
      public clang::RecursiveASTVisitor<ReplaceLiteralWithConstant> {

public:
  using Mutator::Mutator;

  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    Expr *Literal = randElement(TheLiterals);

    // Get the literal's type and value
    QualType LiteralType = Literal->getType();
    std::string LiteralValue = getSourceText(Literal).str();

    // Generate a unique name for the new global constant
    std::string NewConstantName = generateUniqueName("const");

    // Create the declaration for the new global constant
    std::string NewConstantDeclaration = formatAsDecl(LiteralType, NewConstantName) + " = " + LiteralValue + ";\n";

    // Insert the declaration at the beginning of the translation unit
    SourceLocation InsertLoc = getMostRecentTranslationUnitDecl(getFunctionDecl(Literal))->getBeginLoc();
    getRewriter().InsertTextBefore(InsertLoc, NewConstantDeclaration);

    // Replace the literal with the new constant
    getRewriter().ReplaceText(Literal->getSourceRange(), NewConstantName);

    return true;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;
};

static RegisterMutator<ReplaceLiteralWithConstant> X(
    "ReplaceLiteralWithConstant", "Replace a literal with a global constant.");
```

This implementation uses the `RecursiveASTVisitor` to collect all instances of `IntegerLiteral` and `FloatingLiteral` in the AST. The `mutate()` function then randomly selects one of these literals, generates a unique name for a new global constant, creates a declaration for this constant with the same value as the selected literal, inserts this declaration at the beginning of the translation unit, and replaces the selected literal with the new constant.
Q>>>>>>>>0:01:35.397613
Based on the results of your ReplaceLiteralWithConstant implementation, we have encountered an issue:

The implemented mutator is not compiling.

To aid in troubleshooting, please find the relevant information below:

Compilation errors:
```
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp: In member function ‘virtual bool ReplaceLiteralWithConstant::mutate()’:
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp:38:65: error: ‘getFunctionDecl’ was not declared in this scope; did you mean ‘VisitFunctionDecl’?
   38 |     SourceLocation InsertLoc = getMostRecentTranslationUnitDecl(getFunctionDecl(Literal))->getBeginLoc();
      |                                                                 ^~~~~~~~~~~~~~~
      |                                                                 VisitFunctionDecl
make[2]: *** [CMakeFiles/MetaMut.dir/build.make:342: CMakeFiles/MetaMut.dir/lib/mutators/ReplaceLiteralWithConstant.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/MetaMut.dir/all] Error 2
make: *** [Makefile:91: all] Error 2

```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Important Notes**
- Your response should be a code box containing your mutator implementation.
- Do not leave any code unimplemented.
- Your implementation should follow the format of the provided example.

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:02:20.772638
Apologies for the confusion. The function `getFunctionDecl()` was not declared in the previous code snippet. It seems like we are trying to get the enclosing function of a given expression. Hence, I'll replace `getFunctionDecl(Literal)` with a utility function that should find the enclosing `FunctionDecl` for a given `Expr`. 

Here is the modified `ReplaceLiteralWithConstant` mutator:

```cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ReplaceLiteralWithConstant
    : public Mutator,
      public clang::RecursiveASTVisitor<ReplaceLiteralWithConstant> {

public:
  using Mutator::Mutator;

  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    Expr *Literal = randElement(TheLiterals);

    // Get the literal's type and value
    QualType LiteralType = Literal->getType();
    std::string LiteralValue = getSourceText(Literal).str();

    // Generate a unique name for the new global constant
    std::string NewConstantName = generateUniqueName("const");

    // Create the declaration for the new global constant
    std::string NewConstantDeclaration = formatAsDecl(LiteralType, NewConstantName) + " = " + LiteralValue + ";\n";

    // Insert the declaration at the beginning of the translation unit
    FunctionDecl* EnclosingFunction = getEnclosingFunctionDecl(Literal);
    if (!EnclosingFunction) return false;
    SourceLocation InsertLoc = getMostRecentTranslationUnitDecl(EnclosingFunction)->getBeginLoc();
    getRewriter().InsertTextBefore(InsertLoc, NewConstantDeclaration);

    // Replace the literal with the new constant
    getRewriter().ReplaceText(Literal->getSourceRange(), NewConstantName);

    return true;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;

  FunctionDecl* getEnclosingFunctionDecl(Expr *E) {
    if (!E) return nullptr;
    ASTContext &Context = E->getASTContext();
    return Context.getParents(*E)[0].get<FunctionDecl>();
  }
};

static RegisterMutator<ReplaceLiteralWithConstant> X(
    "ReplaceLiteralWithConstant", "Replace a literal with a global constant.");
```

In this code, `getEnclosingFunctionDecl()` is a helper function that retrieves the `FunctionDecl` enclosing the given `Expr`. The `mutate()` function uses this to get the enclosing function of the selected literal and insert the new constant declaration at the beginning of the corresponding translation unit.
Q>>>>>>>>0:02:28.086532
Based on the results of your ReplaceLiteralWithConstant implementation, we have encountered an issue:

The implemented mutator is not compiling.

To aid in troubleshooting, please find the relevant information below:

Compilation errors:
```
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp: In member function ‘clang::FunctionDecl* ReplaceLiteralWithConstant::getEnclosingFunctionDecl(clang::Expr*)’:
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp:64:30: error: ‘class clang::Expr’ has no member named ‘getASTContext’
   64 |     ASTContext &Context = E->getASTContext();
      |                              ^~~~~~~~~~~~~
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp:65:30: error: invalid use of incomplete type ‘class clang::DynTypedNodeList’
   65 |     return Context.getParents(*E)[0].get<FunctionDecl>();
      |            ~~~~~~~~~~~~~~~~~~^~~~
In file included from MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp:1:
/usr/lib/llvm-12/include/clang/AST/ASTContext.h:102:7: note: forward declaration of ‘class clang::DynTypedNodeList’
  102 | class DynTypedNodeList;
      |       ^~~~~~~~~~~~~~~~
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp:65:54: error: expected primary-expression before ‘>’ token
   65 |     return Context.getParents(*E)[0].get<FunctionDecl>();
      |                                                      ^
compilation terminated due to -fmax-errors=3.
make[2]: *** [CMakeFiles/MetaMut.dir/build.make:342: CMakeFiles/MetaMut.dir/lib/mutators/ReplaceLiteralWithConstant.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/MetaMut.dir/all] Error 2
make: *** [Makefile:91: all] Error 2

```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Important Notes**
- Your response should be a code box containing your mutator implementation.
- Do not leave any code unimplemented.
- Your implementation should follow the format of the provided example.

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:03:31.998445
Apologies for the confusion, the `Expr` class indeed does not have the `getASTContext()` method. Also, the `getParents(*E)[0].get<FunctionDecl>()` method call is not valid. Let's change the approach and use `RecursiveASTVisitor` to search for the enclosing `FunctionDecl` of the `Expr`.

In the following mutator implementation, we use a recursive visitor to walk the AST and find the enclosing `FunctionDecl` of a given `Expr`. The `EnclosingFunctionFinder` class is a helper class for this purpose. The `mutate()` function uses `EnclosingFunctionFinder` to get the enclosing function of the selected literal and insert the new constant declaration at the beginning of the corresponding translation unit.

```cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ReplaceLiteralWithConstant
    : public Mutator,
      public clang::RecursiveASTVisitor<ReplaceLiteralWithConstant> {

public:
  using Mutator::Mutator;

  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    Expr *Literal = randElement(TheLiterals);

    // Get the literal's type and value
    QualType LiteralType = Literal->getType();
    std::string LiteralValue = getSourceText(Literal).str();

    // Generate a unique name for the new global constant
    std::string NewConstantName = generateUniqueName("const");

    // Create the declaration for the new global constant
    std::string NewConstantDeclaration = formatAsDecl(LiteralType, NewConstantName) + " = " + LiteralValue + ";\n";

    // Insert the declaration at the beginning of the translation unit
    EnclosingFunctionFinder Finder(Literal);
    Finder.TraverseDecl(getASTContext().getTranslationUnitDecl());
    FunctionDecl* EnclosingFunction = Finder.getEnclosingFunction();
    if (!EnclosingFunction) return false;
    SourceLocation InsertLoc = getMostRecentTranslationUnitDecl(EnclosingFunction)->getBeginLoc();
    getRewriter().InsertTextBefore(InsertLoc, NewConstantDeclaration);

    // Replace the literal with the new constant
    getRewriter().ReplaceText(Literal->getSourceRange(), NewConstantName);

    return true;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;

  class EnclosingFunctionFinder : public RecursiveASTVisitor<EnclosingFunctionFinder> {
  public:
    EnclosingFunctionFinder(Expr* Target) : TargetExpr(Target), EnclosingFunc(nullptr) {}

    bool VisitFunctionDecl(FunctionDecl* FD) {
      if (FD->getBody() && FD->getBody()->contains(TargetExpr)) {
        EnclosingFunc = FD;
        return false; // stop traversal when found
      }
      return true;
    }

    FunctionDecl* getEnclosingFunction() const { return EnclosingFunc; }

  private:
    Expr* TargetExpr;
    FunctionDecl* EnclosingFunc;
  };
};

static RegisterMutator<ReplaceLiteralWithConstant> X(
    "ReplaceLiteralWithConstant", "Replace a literal with a global constant.");
```

In this code, `EnclosingFunctionFinder` is a helper class that traverses the AST and finds the `FunctionDecl` enclosing a given `Expr`. The `mutate()` function uses this helper class to get the enclosing function of the selected literal and insert the new constant declaration at the beginning of the corresponding translation unit.
Q>>>>>>>>0:03:42.738631
Based on the results of your ReplaceLiteralWithConstant implementation, we have encountered an issue:

The implemented mutator is not compiling.

To aid in troubleshooting, please find the relevant information below:

Compilation errors:
```
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp: In member function ‘bool ReplaceLiteralWithConstant::EnclosingFunctionFinder::VisitFunctionDecl(clang::FunctionDecl*)’:
MetaMut/lib/mutators/ReplaceLiteralWithConstant.cpp:69:43: error: ‘class clang::Stmt’ has no member named ‘contains’
   69 |       if (FD->getBody() && FD->getBody()->contains(TargetExpr)) {
      |                                           ^~~~~~~~
make[2]: *** [CMakeFiles/MetaMut.dir/build.make:342: CMakeFiles/MetaMut.dir/lib/mutators/ReplaceLiteralWithConstant.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/MetaMut.dir/all] Error 2
make: *** [Makefile:91: all] Error 2

```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Important Notes**
- Your response should be a code box containing your mutator implementation.
- Do not leave any code unimplemented.
- Your implementation should follow the format of the provided example.

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:04:52.533684
My apologies for the confusion. The `Stmt` class indeed does not have a `contains` method. In order to check if an expression is contained within a function, we can traverse the statements within the function body using another `RecursiveASTVisitor`. Here's a revised version of the code:

```cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ReplaceLiteralWithConstant
    : public Mutator,
      public clang::RecursiveASTVisitor<ReplaceLiteralWithConstant> {

public:
  using Mutator::Mutator;

  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    Expr *Literal = randElement(TheLiterals);

    // Get the literal's type and value
    QualType LiteralType = Literal->getType();
    std::string LiteralValue = getSourceText(Literal).str();

    // Generate a unique name for the new global constant
    std::string NewConstantName = generateUniqueName("const");

    // Create the declaration for the new global constant
    std::string NewConstantDeclaration = formatAsDecl(LiteralType, NewConstantName) + " = " + LiteralValue + ";\n";

    // Insert the declaration at the beginning of the translation unit
    EnclosingFunctionFinder Finder(Literal);
    Finder.TraverseDecl(getASTContext().getTranslationUnitDecl());
    FunctionDecl* EnclosingFunction = Finder.getEnclosingFunction();
    if (!EnclosingFunction) return false;
    SourceLocation InsertLoc = getMostRecentTranslationUnitDecl(EnclosingFunction)->getBeginLoc();
    getRewriter().InsertTextBefore(InsertLoc, NewConstantDeclaration);

    // Replace the literal with the new constant
    getRewriter().ReplaceText(Literal->getSourceRange(), NewConstantName);

    return true;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;

  class EnclosingFunctionFinder : public RecursiveASTVisitor<EnclosingFunctionFinder> {
  public:
    EnclosingFunctionFinder(Expr* Target) : TargetExpr(Target), EnclosingFunc(nullptr) {}

    bool VisitFunctionDecl(FunctionDecl* FD) {
      ExprFinder Finder(TargetExpr);
      Finder.TraverseStmt(FD->getBody());
      if (Finder.found()) {
        EnclosingFunc = FD;
        return false; // stop traversal when found
      }
      return true;
    }

    FunctionDecl* getEnclosingFunction() const { return EnclosingFunc; }

  private:
    Expr* TargetExpr;
    FunctionDecl* EnclosingFunc;

    class ExprFinder : public RecursiveASTVisitor<ExprFinder> {
    public:
      ExprFinder(Expr* Target) : TargetExpr(Target), Found(false) {}

      bool VisitExpr(Expr* E) {
        if (E == TargetExpr) {
          Found = true;
          return false; // stop traversal when found
        }
        return true;
      }

      bool found() const { return Found; }

    private:
      Expr* TargetExpr;
      bool Found;
    };
  };
};

static RegisterMutator<ReplaceLiteralWithConstant> X(
    "ReplaceLiteralWithConstant", "Replace a literal with a global constant.");
```

In this code, `ExprFinder` is a new helper class that traverses the statements within a function and checks if a given expression is found. The `found` member function indicates whether the expression has been found during traversal. The `EnclosingFunctionFinder` uses this helper class to check whether the target expression is contained within a function's body.