
Q>>>>>>>>0:00:00.000000
You're working on a sophisticated task, creating a semantic-aware program mutator. We need to devise a new mutator for this purpose. 

Below is a list of mutators I've already implemented. To avoid redundancy, please ensure your proposed mutator is distinct from these:
```

AddRandomGotoStmt: Insert a new GotoStmt at a random position within a CompoundStmt excluding the last statement

ChangeBinop: Change binary expression's operator.

ChangeDeclRef: Change a DeclRefExpr's referenced variable.

DecayRandomArrayToPointer: Decay a randomly selected array variable to a pointer variable.

DuplicateBranch: Duplicates one branch of an if statement

IncreasePointerLevel: Increase the pointer level of a variable.

InlineFunctionCall: Inline a function call with its body.

InsertRandomTypeConversion: Insert a random type conversion to a compatible type.

InverseLogicalExpr: Inverse logical expressions.

InverseUnaryOperator: Inverses a Unary Operator

ModifyArrayDim: Modifies a random ArrayType variable's dimension.

NegateLiteral: Negate a selected Integer or Floating point Literal.

ReplaceReturnWithGlobal: Replace a function's return expression with a global variable.

SwapFuncDeclParams: Swap two parameters in a function declaration and its call sites

SwitchInitExpr: Switch initialization expressions of two VarDecls.

ToggleReturnExpr: Toggle return expression to default value.

```

To aid in the development of a new mutator, consider manipulating the following elements through actions such as Addition, Modification, Combination, Copying, Decay, Inlining, Un-inlining, Duplication, Destruction, Grouping, Increase, Inversion, Lift, Mutation, Removal, Swap, Switch, or Toggle:
Initialization, InitExpr, UnaryOperator, CharLiteral, IntegerLiteral, Type, Decl->getType, ReturnExpr, VarDecl, Scope, StmtExpr, FieldDecl, BinaryOperator, Stmt, CompoundStmt, IfStmt, GotoStmt, WhileStmt, WhileStmt->getCond, StringLiteral, PointerType, Parameter, ArrayDimension, PointerLevel, LogicalExpr, Branches, CaseStmt, LabelStmt, FunctionDecl, FunctionDecl.type, TypeConversion, ExprStmt.

**Important Guidelines**:
- Your response should detail only a single mutator.
- The mutator should involve only one mutation operator (or verb) and one mutation target.
- The response should adhere strictly to the following format, with no additional information:
```
ShuffleStmts: This mutator randomly selects a subset of consecutive statements from a CompoundStmt, shuffles them, and replaces the original ith stmt with the ith shuffled stmt.
```
A<<<<<<<<0:00:14.057870
```
InsertRandomUnaryOperator: This mutator randomly selects an IntegerLiteral or Floating point Literal and wraps it with a randomly selected unary operator.
```
Q>>>>>>>>0:00:14.059565
Assist me in identifying test cases that can effectively apply the mutator named InsertRandomUnaryOperator.

**Important Guidelines**
- Each test case should be presented in a separate code block.
- Each test case should be a complete, compilable, runnable program.
- Don't use C++ features
A<<<<<<<<0:00:40.278535
Sure, here are three test cases:

1. A simple function with an integer literal:

```c
#include <stdio.h>

int main() {
    int a = 5;
    printf("%d\n", a);
    return 0;
}
```

2. A simple function with a floating point literal:

```c
#include <stdio.h>

int main() {
    double a = 3.14;
    printf("%f\n", a);
    return 0;
}
```

3. A more complex function with multiple integer and floating point literals:

```c
#include <stdio.h>

int calculateArea(int length, int width) {
    return length * width;
}

double calculateCircleArea(double radius) {
    return 3.14 * radius * radius;
}

int main() {
    int area = calculateArea(5, 10);
    double circleArea = calculateCircleArea(2.5);

    printf("Rectangle area: %d\n", area);
    printf("Circle area: %f\n", circleArea);

    return 0;
}
```

The `InsertRandomUnaryOperator` mutator could insert unary operators before any of the literals in these programs. For example, in the first program, the mutator could change `int a = 5;` to `int a = -5;` or `int a = +5;`. Similarly, in the third program, it could change `return 3.14 * radius * radius;` to `return -3.14 * radius * radius;` or `return +3.14 * radius * radius;`.
Q>>>>>>>>0:00:40.285248
Assist me in implementing the mutator named InsertRandomUnaryOperator. Below is the description of its functionality:
This mutator randomly selects an IntegerLiteral or Floating point Literal and wraps it with a randomly selected unary operator.
```

You can utilize below's two example implementation as a reference:

Example implementation for mutator ChangeDeclRef.
```cpp
// ChangeDeclRef.cpp
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ChangeDeclRef : public Mutator,
                      public clang::RecursiveASTVisitor<ChangeDeclRef> {

  using VisitorTy = clang::RecursiveASTVisitor<ChangeDeclRef>;

public:
  using Mutator::Mutator;
  bool mutate() override {
    TheVars.push_back({});
    TraverseAST(getASTContext());
    if (TheRefs.empty() || TheVars.empty()) return false;

    DeclRefExpr *ref = randElement(TheRefs);
    if (!isa<VarDecl>(ref->getDecl()))
      return false; // Ensure the Decl is actually a VarDecl

    VarDecl *oldVar = cast<VarDecl>(ref->getDecl());
    if (ExprVarsMap[ref].size() == 0) return false;

    VarDecl *newVar = randElement(ExprVarsMap[ref]);
    if (oldVar == newVar) return false;

    // Replace the old variable with the new one
    getRewriter().ReplaceText(ref->getSourceRange(), newVar->getNameAsString());

    return true;
  }

  bool VisitDeclRefExpr(clang::DeclRefExpr *DRE) {
    if (isMutationSite(DRE)) {
      TheRefs.push_back(DRE);
      ExprVarsMap[DRE] = TheVars.back();
    }
    return true;
  }

  bool VisitVarDecl(clang::VarDecl *VD) {
    if (!TheVars.empty()) { TheVars.back().push_back(VD); }
    return true;
  }

  bool TraverseCompoundStmt(clang::CompoundStmt *CS) {
    if (!TheVars.empty()) {
      // Push a copy of the current set of variables
      TheVars.push_back(TheVars.back());
    } else {
      // Create the first set of variables
      TheVars.push_back({});
    }

    VisitorTy::TraverseCompoundStmt(CS);
    TheVars.pop_back();
    return true;
  }

  bool TraverseFunctionDecl(clang::FunctionDecl *FD) {
    TheVars.push_back(TheVars.back());
    VisitorTy::TraverseFunctionDecl(FD);
    TheVars.pop_back();
    return true;
  }

private:
  std::map<clang::DeclRefExpr *, std::vector<clang::VarDecl *>> ExprVarsMap;
  std::vector<clang::DeclRefExpr *> TheRefs;
  std::vector<std::vector<clang::VarDecl *>> TheVars;
};

static RegisterMutator<ChangeDeclRef> M(
    "ChangeDeclRef", "Change a DeclRefExpr's referenced variable.");
```

Example implementation for mutator ChangeBinop.
```cpp
// ChangeBinop.cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class ChangeBinop
    : public Mutator,
      public clang::RecursiveASTVisitor<ChangeBinop> {
public:
  using Mutator::Mutator;
  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheOperators.empty()) return false;

    BinaryOperator *expr = randElement(TheOperators);

    // perform rewrite
    auto newOps = computeValidAlternatives(expr);
    BinaryOperatorKind newOpKind = newOps[randIndex(newOps.size())];
    SourceLocation OpLoc = expr->getOperatorLoc();
    std::string NewOp = BinaryOperator::getOpcodeStr(newOpKind).str();
    getRewriter().ReplaceText(
        OpLoc, expr->getOpcodeStr(expr->getOpcode()).size(), NewOp);

    return true;
  }

  bool VisitBinaryOperator(clang::BinaryOperator *BO) {
    TheOperators.push_back(BO);
    return true;
  }

private:
  std::vector<clang::BinaryOperator *> TheOperators;

  std::vector<clang::BinaryOperatorKind> computeValidAlternatives(
      clang::BinaryOperator *op) {
    std::vector<BinaryOperatorKind> validAlternatives;

    Expr *lhs = op->getLHS();
    Expr *rhs = op->getRHS();
    SourceLocation loc = op->getExprLoc();

    auto &sema = getCompilerInstance().getSema();
    for (int i = BO_PtrMemD; i <= BO_Comma; ++i) {
      if (i == BO_PtrMemD || i == BO_PtrMemI || i == BO_Cmp ||
          i == op->getOpcode())
        continue;
      BinaryOperatorKind kind = static_cast<BinaryOperatorKind>(i);
      ExprResult result = sema.CreateBuiltinBinOp(loc, kind, lhs, rhs);

      if (!result.isInvalid()) validAlternatives.push_back(kind);
    }

    return validAlternatives;
  }
};

static RegisterMutator<ChangeBinop> M(
    "ChangeBinop", "Change binary expression's operator.");
```

Consider using the following APIs for easier implementation:
```
* getASTContext()
* getCompilerInstance()
* getCompilerInstance().getSema()
* getMostRecentTranslationUnitDecl(clang::FunctionDecl *)
* std::string formatAsDecl(clang::QualType ty, const std::string &placeholder)
* clang::SourceRange getExpansionRange(clang::SourceRange range)
* clang::SourceLocation getLocForEndOfToken(clang::SourceLocation loc)
* clang::SourceLocation findStringLocationFrom(clang::SourceLocation beginLoc, llvm::StringRef target)
* clang::SourceRange findBracesRange(clang::SourceLocation beginLoc, char beginBrace = '(', char endBrace = ')')
* template <class NodeType> llvm::StringRef getSourceText(const NodeType *node)
* getSourceText().str()
* getManager().getRandomGenerator()
* unsigned randIndex(unsigned n)
* bool randBool();
* template <typename Container> auto &randElement(Container &container) 
* std::string generateUniqueName(const std::string &baseName)

```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Important Notes**
- Your response should be a code box containing your mutator implementation.
- Do not leave any code unimplemented.
- Your implementation should follow the format of the provided example.

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:01:22.521963
Here is the implementation for the `InsertRandomUnaryOperator` mutator:

```cpp
// InsertRandomUnaryOperator.cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>
#include <clang/Sema/Sema.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class InsertRandomUnaryOperator
    : public Mutator,
      public clang::RecursiveASTVisitor<InsertRandomUnaryOperator> {
public:
  using Mutator::Mutator;
  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    Expr *literal = randElement(TheLiterals);

    // perform rewrite
    auto newOps = computeValidAlternatives(literal);
    UnaryOperatorKind newOpKind = newOps[randIndex(newOps.size())];
    std::string NewOp = UnaryOperator::getOpcodeStr(newOpKind).str();
    getRewriter().InsertTextBefore(
        literal->getBeginLoc(), NewOp + " ");

    return true;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;

  std::vector<clang::UnaryOperatorKind> computeValidAlternatives(
      clang::Expr *expr) {
    std::vector<UnaryOperatorKind> validAlternatives;

    SourceLocation loc = expr->getExprLoc();

    auto &sema = getCompilerInstance().getSema();
    for (int i = UO_PostInc; i <= UO_AddrOf; ++i) {
      UnaryOperatorKind kind = static_cast<UnaryOperatorKind>(i);
      ExprResult result = sema.CreateUnaryOperator(loc, kind, expr);

      if (!result.isInvalid()) validAlternatives.push_back(kind);
    }

    return validAlternatives;
  }
};

static RegisterMutator<InsertRandomUnaryOperator> M(
    "InsertRandomUnaryOperator", "Insert a unary operator before a literal.");
```

This code creates a new mutator called `InsertRandomUnaryOperator` that operates on ASTs. It traverses the AST and collects integer and floating point literals. It then selects a random literal and inserts a random unary operator before it. The `computeValidAlternatives` function is used to generate a list of valid unary operators that can be inserted before the literal. The `getRewriter().InsertTextBefore` function is used to insert the new unary operator before the literal in the source code.
Q>>>>>>>>0:01:32.579649
Based on the results of your InsertRandomUnaryOperator implementation, we have encountered an issue:

The implemented mutator is not compiling.

To aid in troubleshooting, please find the relevant information below:

Compilation errors:
```
MetaMut/lib/mutators/InsertRandomUnaryOperator.cpp: In member function ‘std::vector<clang::UnaryOperatorKind> InsertRandomUnaryOperator::computeValidAlternatives(clang::Expr*)’:
MetaMut/lib/mutators/InsertRandomUnaryOperator.cpp:58:32: error: ‘class clang::Sema’ has no member named ‘CreateUnaryOperator’
   58 |       ExprResult result = sema.CreateUnaryOperator(loc, kind, expr);
      |                                ^~~~~~~~~~~~~~~~~~~
make[2]: *** [CMakeFiles/MetaMut.dir/build.make:216: CMakeFiles/MetaMut.dir/lib/mutators/InsertRandomUnaryOperator.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/MetaMut.dir/all] Error 2
make: *** [Makefile:91: all] Error 2

```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Important Notes**
- Your response should be a code box containing your mutator implementation.
- Do not leave any code unimplemented.
- Your implementation should follow the format of the provided example.

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:02:09.070861
I apologize for the confusion. The error arises because `clang::Sema` does not have a method `CreateUnaryOperator`. Instead, a `clang::UnaryOperator` should be directly instantiated. However, it's not recommended to create new instances of AST nodes directly. 

Since we are required to use the `Rewriter` for making modifications to the AST, we don't need to create a new `UnaryOperator` instance. Rather, we can simply insert a valid unary operator string before the literal. Here's the corrected mutator implementation:

```cpp
// InsertRandomUnaryOperator.cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class InsertRandomUnaryOperator
    : public Mutator,
      public clang::RecursiveASTVisitor<InsertRandomUnaryOperator> {
public:
  using Mutator::Mutator;
  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    Expr *literal = randElement(TheLiterals);

    // perform rewrite
    std::string newOp = getRandomValidUnaryOperator();
    getRewriter().InsertTextBefore(
        literal->getBeginLoc(), newOp + " ");

    return true;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;

  std::string getRandomValidUnaryOperator() {
    std::vector<std::string> validOperators = {
      "-", "+", "!", "~", "&", "*"
    };

    return validOperators[rand() % validOperators.size()];
  }
};

static RegisterMutator<InsertRandomUnaryOperator> M(
    "InsertRandomUnaryOperator", "Insert a unary operator before a literal.");
```

In this revised implementation, we simply create a list of valid unary operators and select one at random when required. Since we don't need to check the validity of the operator for a particular expression (which would require creating new AST nodes), we remove the `computeValidAlternatives` function.

This implementation should compile and function as expected, given that the `randElement` function works correctly.
Q>>>>>>>>0:02:34.300804
Based on the results of your InsertRandomUnaryOperator implementation, we have encountered an issue:

The mutator is transforming a semantically valid program into an invalid one.

To aid in troubleshooting, please find the relevant information below:

Compilation errors:
```
output/output.c: In function ‘main’:
output/output.c:6:12: error: lvalue required as unary ‘&’ operand
    6 |     return & 0;
      |            ^

```

Input program:
```
#include <stdio.h>

int main() {
    double a = 3.14;
    printf("%f\n", a);
    return 0;
}
```

Output program:
```
#include <stdio.h>

int main() {
    double a = 3.14;
    printf("%f\n", a);
    return & 0;
}
```

Difference between the input and output programs:
```
--- output/input.c
+++ output/output.c
@@ -3,5 +3,5 @@
 int main() {
     double a = 3.14;
     printf("%f\n", a);
-    return 0;
+    return & 0;
 }
```

Ensure your code is complete, functional, and free of pseudo code. You may use the following template as a reference:
```
{Includes}

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

// this is mutator
class {MutatorName} : public Mutator,
                      public clang::RecursiveASTVisitor<{MutatorName}> {
  using Mutator::Mutator;

  bool {Visitor}({NodeType}) {
    /* Step 2, Collect mutation instances */ }

  bool mutate() override {
    // Step 1, Traverse the AST
    // Step 3, Randomly select a mutation instance
    // Step 4, Checking mutation validity
    // Step 5, Perform mutation
    // Step 6, Return true if changed
  }

private:
  {VarsToStoreMutationInstances}
  // note, you may use multiple vars to store a mutation instance
  // for example, if you want to remove a function, you may
  // 1. use TheFuncs to store all functions
  // 2. use map<FuncDecl, CallExpr> to store all functions' corresponding call exprs
};

static RegisterMutator<{MutatorName}> M(
    "{MutatorName}", "{DetailedMutatorDescription}");
```

**Important Notes**
- Your response should be a code box containing your mutator implementation.
- Do not leave any code unimplemented.
- Your implementation should follow the format of the provided example.

**Notes about counterintuitive clang API**
- Don't use operator new for creating AST nodes.
- Perform mutations only inside mutate, using TraverseXXX or VisitXXX for node collection.
- Use Rewriter for AST modifications, direct changes aren't allowed.
- For inserting after a statement A, use ReplaceText(A.getSourceRange(), getSourceText(A).str() + Delim + InsertedSource), not InsertAfter.
- To insert before FunctionDecl A, use InsertTextBefore(getMostRecentTranslationUnitDecl(A)->getBeginLoc(), ...), not InsertTextBefore(A->getBeginLoc(), ...).
- Use formatAsDecl(type, id) for declaration printing, not string concatenation.
- Replacements for VarDecl A shouldn't have type specifiers, as A->getSourceRange() excludes them.
- To insert after VarDecl A, use InsertTextAfter(getLocForEndOfToken(A->getEndLoc())), not InsertTextAfter(A->getEndLoc()).
- Avoid inserting at A->getBeginLoc() of FunctionDecl/VarDecl A or replacing A->getSourceRange as type specifier not in that range.
A<<<<<<<<0:03:14.700439
I see the problem: the mutator inserts an address-of operator (`&`) before the integer literal `0`, which is not a valid operation in C/C++. The address-of operator requires an lvalue (something that has a memory location), and literals do not have memory locations.

In this revised version of the mutator, I've omitted the address-of and dereference operators (`&` and `*`), as they often require lvalues:

```cpp
// InsertRandomUnaryOperator.cpp
#include <clang/AST/ASTContext.h>
#include <clang/AST/Expr.h>
#include <clang/AST/RecursiveASTVisitor.h>
#include <clang/AST/Stmt.h>
#include <clang/Basic/SourceManager.h>

#include "Mutator.h"
#include "MutatorManager.h"

using namespace clang;
using namespace ysmut;

class InsertRandomUnaryOperator
    : public Mutator,
      public clang::RecursiveASTVisitor<InsertRandomUnaryOperator> {
public:
  using Mutator::Mutator;
  bool mutate() override {
    TraverseAST(getASTContext());
    if (TheLiterals.empty()) return false;

    Expr *literal = randElement(TheLiterals);

    // perform rewrite
    std::string newOp = getRandomValidUnaryOperator();
    getRewriter().InsertTextBefore(
        literal->getBeginLoc(), newOp + " ");

    return true;
  }

  bool VisitIntegerLiteral(clang::IntegerLiteral *IL) {
    TheLiterals.push_back(IL);
    return true;
  }

  bool VisitFloatingLiteral(clang::FloatingLiteral *FL) {
    TheLiterals.push_back(FL);
    return true;
  }

private:
  std::vector<clang::Expr *> TheLiterals;

  std::string getRandomValidUnaryOperator() {
    std::vector<std::string> validOperators = {
      "-", "+", "!", "~"
    };

    return validOperators[rand() % validOperators.size()];
  }
};

static RegisterMutator<InsertRandomUnaryOperator> M(
    "InsertRandomUnaryOperator", "Insert a unary operator before a literal.");
```
In this code, the `getRandomValidUnaryOperator` function only returns unary operators that are always valid when applied to a literal. This ensures that the transformed program is still semantically valid.