You're working on a sophisticated task, creating a semantic-aware program mutator. We need to devise a new mutator for this purpose. 

{% if existing_mutators is not none %}
Below is a list of mutators I've already implemented. To avoid redundancy, please ensure your proposed mutator is distinct from these:
```
{% for item in existing_mutators %}
{{item[0]}}: {{item[1]}}
{% endfor %}
```
{% endif %}

To aid in the development of a new mutator, consider manipulating the following elements through actions such as Addition, Modification, Combination, Copying, Decay, Inlining, Un-inlining, Duplication, Destruction, Grouping, Increase, Inversion, Lift, Mutation, Removal, Swap, Switch, or Toggle:
Initialization, InitExpr, UnaryOperator, CharLiteral, IntegerLiteral, Type, Decl->getType, ReturnExpr, VarDecl, Scope, StmtExpr, FieldDecl, BinaryOperator, Stmt, CompoundStmt, IfStmt, GotoStmt, WhileStmt, WhileStmt->getCond, StringLiteral, PointerType, Parameter, ArrayDimension, PointerLevel, LogicalExpr, Branches, CaseStmt, LabelStmt, FunctionDecl, FunctionDecl.type, TypeConversion, ExprStmt, Attribute, Type Qualifier, Builtin Functions.

**Important Guidelines**:
- Your response should detail only a single mutator.
- The mutator should involve only one mutation operator (or verb) and one mutation target.
- The response should adhere strictly to the following format, with no additional information:
```
InverseLogicalExpr: It takes a logical expression (boolean condition) and flips or inverts it.
```
