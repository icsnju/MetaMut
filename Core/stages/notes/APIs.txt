* getASTContext()
* bool randBool()
* getCompilerInstance()
* getCompilerInstance().getSema()
* unsigned randIndex(unsigned n)
* getManager().getRandomGenerator()
* getMostRecentTranslationUnitDecl(clang::FunctionDecl *)
* std::string formatAsDecl(clang::QualType ty, const std::string &placeholder)
* clang::SourceRange getExpansionRange(clang::SourceRange range)
* clang::SourceLocation findStringLocationFrom(clang::SourceLocation beginLoc, llvm::StringRef target)
* clang::SourceRange findBracesRange(clang::SourceLocation beginLoc, char beginBrace = '(', char endBrace = ')')
* std::string getSourceText(const NodeType *node)
* template <typename Container> auto &randElement(Container &container) 
* std::string generateUniqueName(const std::string &baseName) // note that this only generate a identifier for you, you should insert declaration to corresponding CompStmt by yourself
* bool checkBinOp(clang::BinaryOperatorKind kind, clang::Expr *lhs, clang::Expr *rhs)
* bool checkUnaryOp(clang::UnaryOperatorKind kind, clang::Expr *sub)
* bool checkAssignment(clang::SourceLocation loc, clang::QualType lhsType, clang::QualType rhsType)
* bool addStringBeforeFunctionDecl( const clang::FunctionDecl *FD, const std::string &Str)
* bool addStringBeforeVarDecl( const clang::VarDecl *VD, const std::string &Str)
* bool addStringAfterVarDecl( const clang::VarDecl *VD, const std::string &Str)
* bool addStringAfterStmt( clang::Stmt *AfterStmt, const std::string &Str)
* bool replaceVarDeclarator(const clang::VarDecl *VD, clang::QualType ty); // eg. replace the `*a[10]` part of `int *a[10]`
* bool removeParmFromFuncDecl(const clang::ParmVarDecl *PV, unsigned int TotalNumOfFuncParams, int ParamPos)
* bool removeArgFromExpr( const clang::Expr *E, int ParamPos)
